{"sha":"1aff92c4bad968f78cf38577cbb7c01516475217","commit":{"author":{"name":"Kevin Ratnasekera","email":"djkevincr@yahoo.com","date":"2016-12-12T05:52:27Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2016-12-12T05:52:27Z"},"message":"ESBJAVA-3770 Message size based filtering to prevent OOM. (#679)\n\n* adding fix for ESBJAVA-3770","tree":{"sha":"75bd3906e63d0ad6ccd70623a7b79ddfe879bf11","url":"https://api.github.com/repos/wso2/wso2-synapse/git/trees/75bd3906e63d0ad6ccd70623a7b79ddfe879bf11"},"url":"https://api.github.com/repos/wso2/wso2-synapse/git/commits/1aff92c4bad968f78cf38577cbb7c01516475217","comment_count":0},"url":"https://api.github.com/repos/wso2/wso2-synapse/commits/1aff92c4bad968f78cf38577cbb7c01516475217","html_url":"https://github.com/wso2/wso2-synapse/commit/1aff92c4bad968f78cf38577cbb7c01516475217","comments_url":"https://api.github.com/repos/wso2/wso2-synapse/commits/1aff92c4bad968f78cf38577cbb7c01516475217/comments","author":{"login":"djkevincr","id":1346010,"avatar_url":"https://avatars.githubusercontent.com/u/1346010?v=3","gravatar_id":"","url":"https://api.github.com/users/djkevincr","html_url":"https://github.com/djkevincr","followers_url":"https://api.github.com/users/djkevincr/followers","following_url":"https://api.github.com/users/djkevincr/following{/other_user}","gists_url":"https://api.github.com/users/djkevincr/gists{/gist_id}","starred_url":"https://api.github.com/users/djkevincr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djkevincr/subscriptions","organizations_url":"https://api.github.com/users/djkevincr/orgs","repos_url":"https://api.github.com/users/djkevincr/repos","events_url":"https://api.github.com/users/djkevincr/events{/privacy}","received_events_url":"https://api.github.com/users/djkevincr/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"8cada804710fb2c29404155f85a27e1b1d061e66","url":"https://api.github.com/repos/wso2/wso2-synapse/commits/8cada804710fb2c29404155f85a27e1b1d061e66","html_url":"https://github.com/wso2/wso2-synapse/commit/8cada804710fb2c29404155f85a27e1b1d061e66"}],"stats":{"total":193,"additions":189,"deletions":4},"files":[{"sha":"53a694547838d3b09a5cf763c4505e14cca484fc","filename":"modules/commons/src/main/java/org/apache/synapse/commons/util/MiscellaneousUtil.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/wso2/wso2-synapse/blob/1aff92c4bad968f78cf38577cbb7c01516475217/modules/commons/src/main/java/org/apache/synapse/commons/util/MiscellaneousUtil.java","raw_url":"https://github.com/wso2/wso2-synapse/raw/1aff92c4bad968f78cf38577cbb7c01516475217/modules/commons/src/main/java/org/apache/synapse/commons/util/MiscellaneousUtil.java","contents_url":"https://api.github.com/repos/wso2/wso2-synapse/contents/modules/commons/src/main/java/org/apache/synapse/commons/util/MiscellaneousUtil.java?ref=1aff92c4bad968f78cf38577cbb7c01516475217","patch":"@@ -176,8 +176,14 @@ public static Properties loadProperties(String filePath) {\n                 properties.load(in);\n             } catch (IOException e) {\n                 handleException(\"Error loading properties from a file at : \" + filePath, e);\n-            }\n-        }\n+\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tin.close();\n+\t\t\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t\t\tlog.warn(\"Error while closing the input stream from the file: \" + filePath, e);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n         return properties;\n     }\n "},{"sha":"09a4a87a716bc1c4d1d5f89f7117d47c3d2ed95e","filename":"modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/wso2/wso2-synapse/blob/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java","raw_url":"https://github.com/wso2/wso2-synapse/raw/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java","contents_url":"https://api.github.com/repos/wso2/wso2-synapse/contents/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java?ref=1aff92c4bad968f78cf38577cbb7c01516475217","patch":"@@ -209,4 +209,7 @@\n     public static final String ORIGINAL_HTTP_SC = \"ORIGINAL_STATUS_CODE\";\n     public static final String ORIGINAL_HTTP_REASON_PHRASE = \"HTTP_REASON_PHRASE\";\n \n+\n+    public static final String MESSAGE_SIZE_VALIDATION_SUM = \"MESSAGE_SIZE_VALIDATION_SUM\";\n+    public static final String SOURCE_CONNECTION_DROPPED = \"SOURCE_CONNECTION_DROPPED\";\n }"},{"sha":"021cf1a5e91e173b9c2fb12ed896f96b38a59c3b","filename":"modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/wso2/wso2-synapse/blob/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java","raw_url":"https://github.com/wso2/wso2-synapse/raw/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java","contents_url":"https://api.github.com/repos/wso2/wso2-synapse/contents/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java?ref=1aff92c4bad968f78cf38577cbb7c01516475217","patch":"@@ -461,6 +461,12 @@ public void submitResponse(MessageContext msgContext)\n         SourceRequest sourceRequest = SourceContext.getRequest(conn);\n \n         if (sourceRequest == null) { // We'll get here if the connection is already closed\n+            //this is a special case we dropped source connection where message size exceeds the user defined threshold\n+            if (conn.getContext().getAttribute(PassThroughConstants.SOURCE_CONNECTION_DROPPED) != null &&\n+                    (Boolean) conn.getContext().getAttribute(PassThroughConstants.SOURCE_CONNECTION_DROPPED)) {\n+                //already submitted response for this case, hence return\n+                return;\n+            }\n             log.warn(\"Trying to submit a response to an already closed connection : \" + conn);\n             return;\n         }"},{"sha":"f991475ea4b3af61ecc753a1690fda3dc262967d","filename":"modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/Pipe.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/wso2/wso2-synapse/blob/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/Pipe.java","raw_url":"https://github.com/wso2/wso2-synapse/raw/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/Pipe.java","contents_url":"https://api.github.com/repos/wso2/wso2-synapse/contents/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/Pipe.java?ref=1aff92c4bad968f78cf38577cbb7c01516475217","patch":"@@ -242,6 +242,33 @@ public int produce(final ContentDecoder decoder) throws IOException {\n         }\n     }\n \n+    /**\n+     * Helper method to mark as producer completed. The normal behavior only set the boolean param to true only when\n+     * decoder is completed. However in some cases it is needed to intentionally close chunk stream and mark as\n+     * producer completed in order to prevent consumer further waiting on end of stream condition.\n+     *\n+     * @param decoder decoder instance to consume input\n+     */\n+    public void forceProducerComplete(final ContentDecoder decoder) {\n+        //no need to mark EoS if decoder is completed\n+        if (!decoder.isCompleted()) {\n+            lock.lock();\n+            try {\n+                producerCompleted = true;\n+                //there can be edge cases where consumer already  waiting on read condition ( buffer is empty )\n+                //in that case marking producer complete is not enough need to clear the read condition\n+                //consumer is waiting on\n+                readCondition.signalAll();\n+                //let consumer complete = clear consumerIoControl.suspendOutput();\n+                if (consumerIoControl != null) {\n+                    consumerIoControl.requestOutput();\n+                }\n+            } finally {\n+                lock.unlock();\n+            }\n+        }\n+    }\n+\n     @Override\n     public String toString() {\n         return name;"},{"sha":"9e3effa83903328663b292b892356a9c643d6415","filename":"modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java","status":"modified","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/wso2/wso2-synapse/blob/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java","raw_url":"https://github.com/wso2/wso2-synapse/raw/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java","contents_url":"https://api.github.com/repos/wso2/wso2-synapse/contents/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java?ref=1aff92c4bad968f78cf38577cbb7c01516475217","patch":"@@ -35,6 +35,7 @@\n import org.apache.http.protocol.HttpContext;\n import org.apache.synapse.commons.jmx.ThreadingView;\n import org.apache.synapse.commons.transaction.TranscationManger;\n+import org.apache.synapse.commons.util.MiscellaneousUtil;\n import org.apache.synapse.transport.http.conn.LoggingNHttpServerConnection;\n import org.apache.synapse.transport.http.conn.Scheme;\n import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n@@ -45,6 +46,7 @@\n import javax.ws.rs.HttpMethod;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.util.Properties;\n \n /**\n  * This is the class where transport interacts with the client. This class\n@@ -63,6 +65,14 @@\n     private LatencyView s2sLatencyView = null;\n     private  ThreadingView threadingView;\n \n+    private static boolean isMessageSizeValidationEnabled = false;\n+\n+    private static int validMaxMessageSize = Integer.MAX_VALUE;\n+\n+    public static final String PROPERTY_FILE = \"passthru-http.properties\";\n+    public static final String MESSAGE_SIZE_VALIDATION = \"message.size.validation.enabled\";\n+    public static final String VALID_MAX_MESSAGE_SIZE = \"valid.max.message.size.in.bytes\";\n+\n     public SourceHandler(SourceConfiguration sourceConfiguration) {\n         this.sourceConfiguration = sourceConfiguration;\n         this.metrics = sourceConfiguration.getMetrics();\n@@ -83,6 +93,19 @@ public SourceHandler(SourceConfiguration sourceConfiguration) {\n             this.threadingView = new ThreadingView(PassThroughConstants.PASSTHOUGH_HTTP_SERVER_WORKER, true, 50);\n         }\n \n+        Properties props = MiscellaneousUtil.loadProperties(PROPERTY_FILE);\n+        String validationProperty = MiscellaneousUtil.getProperty(props, MESSAGE_SIZE_VALIDATION, \"false\");\n+        String validMaxMessageSizeStr = MiscellaneousUtil\n+                .getProperty(props, VALID_MAX_MESSAGE_SIZE, String.valueOf(Integer.MAX_VALUE));\n+        isMessageSizeValidationEnabled = Boolean.valueOf(validationProperty);\n+        try {\n+            validMaxMessageSize = Integer.valueOf(validMaxMessageSizeStr);\n+        } catch (NumberFormatException e) {\n+            log.warn(\"Invalid max message size configured for property \\\"valid.max.message.size.in.bytes\\\", \"\n+                    + \"setting the Integer MAX_VALUE as the valid maximum message size\", e);\n+            validMaxMessageSize = Integer.MAX_VALUE;\n+        }\n+\n     }\n \n     public void connected(NHttpServerConnection conn) {\n@@ -98,6 +121,9 @@ public void requestReceived(NHttpServerConnection conn) {\n             HttpContext httpContext = conn.getContext();\n             httpContext.setAttribute(PassThroughConstants.REQ_ARRIVAL_TIME, System.currentTimeMillis());\n             httpContext.setAttribute(PassThroughConstants.REQ_FROM_CLIENT_READ_START_TIME, System.currentTimeMillis());\n+            if (isMessageSizeValidationEnabled) {\n+                httpContext.setAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM, 0);\n+            }\n \n             SourceRequest request = getSourceRequest(conn);\n             if (request == null) {\n@@ -144,9 +170,33 @@ public void inputReady(NHttpServerConnection conn,\n             SourceRequest request = SourceContext.getRequest(conn);\n \n             int readBytes = request.read(conn, decoder);\n+\n+            if (isMessageSizeValidationEnabled) {\n+                HttpContext httpContext = conn.getContext();\n+                //this is introduced as some transports which extends passthrough source handler which have overloaded\n+                //method requestReceived() Eg:- inbound http/https\n+                if (httpContext.getAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM) == null) {\n+                    httpContext.setAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM, 0);\n+                }\n+                int messageSizeSum = (int) httpContext.getAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM);\n+\n+                messageSizeSum += readBytes;\n+\n+                if (messageSizeSum > validMaxMessageSize) {\n+                    log.warn(\"Payload exceeds valid payload size range, hence discontinuing chunk stream at \"\n+                            + messageSizeSum + \" bytes to prevent OOM.\");\n+                    dropSourceConnection(conn);\n+                    conn.getContext().setAttribute(PassThroughConstants.SOURCE_CONNECTION_DROPPED, true);\n+                    //stopped http chunk stream from here and mark producer complete\n+                    request.getPipe().forceProducerComplete(decoder);\n+                }\n+                httpContext.setAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM, messageSizeSum);\n+            }\n+\n             if (readBytes > 0) {\n                 metrics.incrementBytesReceived(readBytes);\n             }\n+\n         } catch (IOException e) {\n             logIOException(conn, e);\n \n@@ -157,6 +207,36 @@ public void inputReady(NHttpServerConnection conn,\n         }\n     }\n \n+    /**\n+     * Closes the source side HTTP connection.\n+     *\n+     * @param conn HTTP server connection reference\n+     */\n+    private void dropSourceConnection(NHttpServerConnection conn) {\n+        try {\n+            HttpContext httpContext = conn.getContext();\n+\n+            HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_REQUEST_TOO_LONG,\n+                    \"Payload Too Large\");\n+            response.setParams(new DefaultedHttpParams(sourceConfiguration.getHttpParams(), response.getParams()));\n+            response.addHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);\n+\n+            httpContext.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);\n+            httpContext.setAttribute(ExecutionContext.HTTP_REQUEST, null);\n+            httpContext.setAttribute(ExecutionContext.HTTP_RESPONSE, response);\n+\n+            sourceConfiguration.getHttpProcessor().process(response, httpContext);\n+\n+            conn.submitResponse(response);\n+            SourceContext.updateState(conn, ProtocolState.CLOSED);\n+            conn.close();\n+        } catch (Exception ex) {\n+            log.error(ex.getMessage(), ex);\n+            SourceContext.updateState(conn, ProtocolState.CLOSED);\n+            sourceConfiguration.getSourceConnections().shutDownConnection(conn, true);\n+        }\n+    }\n+\n     public void responseReady(NHttpServerConnection conn) {\n         try {\n             ProtocolState protocolState = SourceContext.getState(conn);"},{"sha":"9cb04a33f1f21234a0c31266263ea723063a3cf2","filename":"modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java","status":"modified","additions":65,"deletions":2,"changes":67,"blob_url":"https://github.com/wso2/wso2-synapse/blob/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java","raw_url":"https://github.com/wso2/wso2-synapse/raw/1aff92c4bad968f78cf38577cbb7c01516475217/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java","contents_url":"https://api.github.com/repos/wso2/wso2-synapse/contents/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java?ref=1aff92c4bad968f78cf38577cbb7c01516475217","patch":"@@ -38,6 +38,7 @@\n import org.apache.http.nio.NHttpServerConnection;\n import org.apache.http.nio.reactor.IOSession;\n import org.apache.http.protocol.HttpContext;\n+import org.apache.synapse.commons.util.MiscellaneousUtil;\n import org.apache.synapse.transport.http.conn.ClientConnFactory;\n import org.apache.synapse.transport.http.conn.LoggingNHttpClientConnection;\n import org.apache.synapse.transport.http.conn.ProxyTunnelHandler;\n@@ -47,6 +48,7 @@\n import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n \n import java.io.IOException;\n+import java.util.Properties;\n \n \n /**\n@@ -69,6 +71,14 @@\n \n     private PassThroughTransportMetricsCollector metrics = null;\n \n+    private static boolean isMessageSizeValidationEnabled = false;\n+\n+    private static int validMaxMessageSize = Integer.MAX_VALUE;\n+\n+    public static final String PROPERTY_FILE = \"passthru-http.properties\";\n+    public static final String MESSAGE_SIZE_VALIDATION = \"message.size.validation.enabled\";\n+    public static final String VALID_MAX_MESSAGE_SIZE = \"valid.max.message.size.in.bytes\";\n+\n     public TargetHandler(DeliveryAgent deliveryAgent,\n                          ClientConnFactory connFactory,\n                          TargetConfiguration configuration) {\n@@ -77,6 +87,20 @@ public TargetHandler(DeliveryAgent deliveryAgent,\n         this.targetConfiguration = configuration;\n         this.targetErrorHandler = new TargetErrorHandler(targetConfiguration);\n         this.metrics = targetConfiguration.getMetrics();\n+\n+        Properties props = MiscellaneousUtil.loadProperties(PROPERTY_FILE);\n+        String validationProperty = MiscellaneousUtil.getProperty(props, MESSAGE_SIZE_VALIDATION, \"false\");\n+        String validMaxMessageSizeStr = MiscellaneousUtil\n+                .getProperty(props, VALID_MAX_MESSAGE_SIZE, String.valueOf(Integer.MAX_VALUE));\n+        isMessageSizeValidationEnabled = Boolean.valueOf(validationProperty);\n+        try {\n+            validMaxMessageSize = Integer.valueOf(validMaxMessageSizeStr);\n+        } catch (NumberFormatException e) {\n+            log.warn(\"Invalid max message size configured for property \\\"valid.max.message.size.in.bytes\\\", \"\n+                    + \"setting the Integer MAX_VALUE as the valid maximum message size\", e);\n+            validMaxMessageSize = Integer.MAX_VALUE;\n+        }\n+\n     }\n \n     public void connected(NHttpClientConnection conn, Object o) {\n@@ -239,6 +263,9 @@ public void outputReady(NHttpClientConnection conn, ContentEncoder encoder) {\n \n     public void responseReceived(NHttpClientConnection conn) {\n         HttpContext context = conn.getContext();\n+        if (isMessageSizeValidationEnabled) {\n+            context.setAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM, 0);\n+        }\n         HttpResponse response = conn.getHttpResponse();\n         ProtocolState connState;\n         try {\n@@ -390,6 +417,22 @@ private boolean handle202(MessageContext requestMsgContext) throws AxisFault {\n         return false;\n     }\n \n+    /**\n+     * Closes the target side HTTP connection.\n+     *\n+     * @param conn HTTP client connection reference\n+     */\n+    private void dropTargetConnection(NHttpClientConnection conn) {\n+        try {\n+            TargetContext.updateState(conn, ProtocolState.CLOSED);\n+            conn.close();\n+        } catch (Exception ex) {\n+            log.error(ex.getMessage(), ex);\n+            TargetContext.updateState(conn, ProtocolState.CLOSED);\n+            targetConfiguration.getConnections().shutdownConnection(conn, true);\n+        }\n+    }\n+\n     public void inputReady(NHttpClientConnection conn, ContentDecoder decoder) {\n         ProtocolState connState;\n         MessageContext msgCtx = TargetContext.get(conn).getRequestMsgCtx();\n@@ -412,7 +455,27 @@ public void inputReady(NHttpClientConnection conn, ContentDecoder decoder) {\n \t\t\tif (response != null) {\n                 statusCode = conn.getHttpResponse().getStatusLine().getStatusCode();\n \t\t\t\tint responseRead = response.read(conn, decoder);\n-                if (metrics.getLevel() == MetricsCollector.LEVEL_FULL) {\n+          if (isMessageSizeValidationEnabled) {\n+              HttpContext httpContext = conn.getContext();\n+              //this is introduced as some transports which extends passthrough target handler which have overloaded\n+              //method responseReceived()\n+              if (httpContext.getAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM) == null) {\n+                  httpContext.setAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM, 0);\n+              }\n+              int messageSizeSum = (int) httpContext.getAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM);\n+\n+              messageSizeSum += responseRead;\n+\n+              if (messageSizeSum > validMaxMessageSize) {\n+                  log.warn(\"Payload exceeds valid payload size range, hence discontinuing chunk stream at \"\n+                          + messageSizeSum + \" bytes to prevent OOM.\");\n+                  dropTargetConnection(conn);\n+                  response.getPipe().forceProducerComplete(decoder);\n+              }\n+              httpContext.setAttribute(PassThroughConstants.MESSAGE_SIZE_VALIDATION_SUM, messageSizeSum);\n+          }\n+\n+          if (metrics.getLevel() == MetricsCollector.LEVEL_FULL) {\n                     metrics.incrementBytesReceived(msgCtx, responseRead);\n                 } else {\n                     metrics.incrementBytesReceived(responseRead);\n@@ -656,7 +719,7 @@ public void endOfInput(NHttpClientConnection conn) throws IOException {\n     public void exception(NHttpClientConnection conn, Exception ex) {\n         ProtocolState state = TargetContext.getState(conn);\n         MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();\n-        \n+\n         if (state == ProtocolState.REQUEST_HEAD || state == ProtocolState.REQUEST_BODY) {\n             informWriterError(conn);\n             log.warn(\"Exception occurred while sending the request \" + getConnectionLoggingInfo(conn));"}]}